# explicitly use Debian for maximum cross-architecture compatibility
FROM debian

RUN set -eux; \
	apt-get update && \
	apt-get install -y --no-install-recommends \
	ca-certificates \
	gnupg dirmngr \
	wget \
	\
	gcc \
	libc6-dev \
	make \
	\
	libc6-dev-arm64-cross \
	libc6-dev-armel-cross \
	libc6-dev-armhf-cross \
	libc6-dev-i386-cross \
	libc6-dev-mips64el-cross \
	libc6-dev-ppc64el-cross \
	libc6-dev-riscv64-cross \
	libc6-dev-s390x-cross \
	\
	gcc-aarch64-linux-gnu \
	gcc-arm-linux-gnueabi \
	gcc-arm-linux-gnueabihf \
	gcc-i686-linux-gnu \
	gcc-mips64el-linux-gnuabi64 \
	gcc-powerpc64le-linux-gnu \
	gcc-riscv64-linux-gnu \
	gcc-s390x-linux-gnu \
	\
	arch-test \
	file \
	; \
	rm -rf /var/lib/apt/lists/*

# https://musl.libc.org/releases.html
ENV MUSL_VERSION=1.2.2
RUN set -eux; \
	wget -O musl.tgz.asc "https://musl.libc.org/releases/musl-$MUSL_VERSION.tar.gz.asc"; \
	wget -O musl.tgz "https://musl.libc.org/releases/musl-$MUSL_VERSION.tar.gz"; \
	\
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver keyserver.ubuntu.com --recv-keys '836489290BB6B70F99FFDA0556BCDB593020450F'; \
	gpg --batch --verify musl.tgz.asc musl.tgz; gpgconf --kill all; rm -rf "$GNUPGHOME" musl.tgz.asc; \
	\
	mkdir /usr/local/src/musl; \
	tar --extract --file musl.tgz --directory /usr/local/src/musl --strip-components 1; \
	rm musl.tgz

RUN apt update && apt install -y autoconf libtool git

WORKDIR /usr/src

RUN git clone https://github.com/tklauser/libtar.git

WORKDIR /usr/src/libtar

RUN autoreconf --force --install; \
	./configure; \
	make; \
	make install

WORKDIR /usr/src/speedtest
COPY . .

RUN bash -c "mkdir -p build/{mips64le,ppc64le,arm32v7,arm32v6,arm32v5,arm64v8,riscv64,amd64,s390x,i386}/speedtest"

CMD [ "bash" ]

# RUN set -ex; \
# 	make clean build TARGET_ARCH='amd64'    ARCH_TEST='amd64'    CROSS_COMPILE='x86_64-linux-gnu-';
# # make clean build TARGET_ARCH='i386'     ARCH_TEST='i386'     CROSS_COMPILE='i686-linux-gnu-'; \
# # make clean build TARGET_ARCH='arm64v8'  ARCH_TEST='arm64'    CROSS_COMPILE='aarch64-linux-gnu-'; \
# # make clean build TARGET_ARCH='arm32v7'  ARCH_TEST='armhf'    CROSS_COMPILE='arm-linux-gnueabihf-'; \
# # make clean build TARGET_ARCH='arm32v6'  ARCH_TEST='armhf'    CROSS_COMPILE='arm-linux-gnueabihf-'; \
# # make clean build TARGET_ARCH='arm32v5'  ARCH_TEST='armel'    CROSS_COMPILE='arm-linux-gnueabi-'; \
# # make clean build TARGET_ARCH='s390x'    ARCH_TEST='s390x'    CROSS_COMPILE='s390x-linux-gnu-'; \
# # make clean build TARGET_ARCH='riscv64'  ARCH_TEST='riscv64'  CROSS_COMPILE='riscv64-linux-gnu-'; \
# # make clean build TARGET_ARCH='mips64le' ARCH_TEST='mips64el' CROSS_COMPILE='mips64el-linux-gnuabi64-'; \
# # make clean build TARGET_ARCH='ppc64le'  ARCH_TEST='ppc64el'  CROSS_COMPILE='powerpc64le-linux-gnu-' CFLAGS+='-mlong-double-64'

# # # Copy the CA Certificate
# # RUN find -name speedtest-c -type f -exec dirname '{}' ';' | xargs -n1 -i'{}' cp /etc/ssl/certs/ca-certificates.crt '{}/ca-certificates.crt'

# CMD ["./amd64/speedtest/speedtest-c"]
